{"version":3,"sources":["components/TopBar/TopBar.tsx","api/binanceApi.ts","api/index.ts","components/OrderSettings/OrderSettings.tsx","containers/Order/Order.tsx","components/Sidebar/Sidebar.tsx","App.jsx","reportWebVitals.js","index.js"],"names":["TopBar","Header","as","getExchangeInfo","a","axios","get","data","symbols","requestInstance","create","baseURL","headers","requests","symbol","post","OrderSettings","initialValues","priceStep","sizeStep","price","limit","useState","allSymbols","setAllSymbols","selectedSymbol","setSelectedSymbol","selectedSymbolPrice","setSelectedSymbolPrice","orderData","setOrderData","useCurrentPrice","setUseCurrentPrice","myArrayOfSymbols","filterSymbols","filter","includes","getPrice","response","useEffect","isMounted","symbolsData","map","x","filteredSymbols","Object","keys","length","onSubmit","values","currentPrice","handleSubmit","setFieldValue","Form","Grid","stackable","padded","columns","Row","className","Column","Field","htmlFor","Dropdown","id","name","placeholder","search","selection","options","key","value","text","onChange","_","symbolString","width","e","target","Checkbox","label","toggle","Button","type","onClick","Order","centered","Sidebar","href","Icon","size","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22d44473.chunk.js","sourcesContent":["import React from 'react';\nimport { Header } from 'semantic-ui-react';\n\nexport const TopBar: React.FC = () => {\n  return (\n    <>\n      <Header as=\"h1\">Create Order</Header>\n    </>\n  );\n};\n","import axios from 'axios';\n\nconst baseUrl = 'https://api2.binance.com';\n\nexport const getExchangeInfo = async <T>(): Promise<T> => {\n  const { data } = await axios.get(`${baseUrl}/api/v3/exchangeInfo`);\n  return data.symbols;\n};\n","import axios from 'axios';\n\nconst requestInstance = axios.create({\n  baseURL: 'http://127.0.0.1:5000/',\n  headers: {\n    'Content-type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n  },\n});\n\ninterface AxiosResponse<T = any> {\n  data: T;\n  status: number;\n  statusText: string;\n  headers: any;\n}\ntype AxiosPromise<TData = any> = Promise<AxiosResponse<TData>>;\ninterface DataInterface {\n  symbol: string;\n  priceStep: number;\n  sizeStep: number;\n  price: string;\n  limit: number;\n}\ninterface Response {\n  data: {\n    response: any;\n  };\n}\n\nexport const requests = {\n  ticker(symbol: string): Promise<AxiosPromise> {\n    return requestInstance.post('/ticker', { symbol });\n  },\n  orders(data: DataInterface): Promise<AxiosPromise> {\n    return requestInstance.post('/orders', { data });\n  },\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useEffect } from 'react';\nimport { Grid, Button, Form, Dropdown, Checkbox } from 'semantic-ui-react';\nimport { Field, Formik } from 'formik';\n\nimport { getExchangeInfo } from '../../api/binanceApi';\nimport { requests } from '../../api';\n\nimport './OrderSettings.scss';\n\ninterface OrderSettingsProps {\n  setOrderData?: React.Dispatch<React.SetStateAction<any>>;\n}\nexport const OrderSettings: React.FC<OrderSettingsProps> = () => {\n  interface FormikInterface {\n    symbol: string;\n    priceStep: number;\n    sizeStep: number;\n    price: string;\n    limit: number;\n  }\n  const initialValues: FormikInterface = {\n    symbol: '',\n    priceStep: 0,\n    sizeStep: 0,\n    price: '',\n    limit: 0,\n  };\n\n  const [allSymbols, setAllSymbols] = useState<string[]>([]);\n  const [selectedSymbol, setSelectedSymbol] = useState<string>('');\n  const [selectedSymbolPrice, setSelectedSymbolPrice] = useState<string>('');\n  const [orderData, setOrderData] = useState(initialValues);\n  const [useCurrentPrice, setUseCurrentPrice] = useState(false);\n\n  const myArrayOfSymbols: string[] = [\n    'ETHBTC',\n    'ETHEUR',\n    'BTCEUR',\n    'BNBEUR',\n    'BTCDOWNUSDT',\n    'BTCUSDT',\n    'EURUSDT',\n    'BTCUSDT',\n    'ETHUSDT',\n    'BNBUSDT',\n  ];\n  const filterSymbols = (symbols: string[]): string[] => {\n    return symbols.filter((symbol) => myArrayOfSymbols.includes(symbol));\n  };\n\n  const getPrice = async () => {\n    const { data } = await requests.ticker(selectedSymbol);\n    setSelectedSymbolPrice(data.response.price);\n  };\n\n  useEffect(() => {\n    let isMounted = true;\n    (async () => {\n      if (isMounted) {\n        interface ExchangeArray {\n          symbol: string;\n        }\n        const symbolsData: ExchangeArray[] = await getExchangeInfo();\n        const symbols = symbolsData.map((x: any): string => x.symbol);\n        const filteredSymbols = filterSymbols(symbols);\n        setAllSymbols(filteredSymbols);\n      }\n    })();\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    if (selectedSymbol !== '') getPrice();\n  }, [selectedSymbol]);\n\n  useEffect(() => {\n    if (Object.keys(orderData).length !== 0) requests.orders(orderData);\n  }, [selectedSymbolPrice, orderData]);\n\n  const showPair = () => {\n    return allSymbols.map((symbol) => ({\n      key: symbol,\n      value: symbol,\n      text: symbol,\n    }));\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(values: FormikInterface) => {\n          const currentPrice = useCurrentPrice ? selectedSymbolPrice : '';\n          setOrderData({ ...values, price: currentPrice });\n        }}\n      >\n        {({ values, handleSubmit, setFieldValue }) => (\n          <Form>\n            <Grid stackable padded=\"horizontally\" columns={3}>\n              <Grid.Row className=\"settings__row settings__row--1\">\n                <Grid.Column>\n                  <Form.Field>\n                    <label htmlFor=\"symbol\">\n                      Pair:\n                      <Grid>\n                        <Grid.Row columns={1}>\n                          <Grid.Column>\n                            <Dropdown\n                              id=\"symbol\"\n                              name=\"symbol\"\n                              placeholder=\"Insert pair\"\n                              search\n                              selection\n                              options={showPair()}\n                              value={values.symbol}\n                              onChange={(_, { name, value }) => {\n                                const symbolString = `${value}`;\n                                setFieldValue(name, value);\n                                setSelectedSymbol(symbolString);\n                              }}\n                            />\n                          </Grid.Column>\n                        </Grid.Row>\n                      </Grid>\n                    </label>\n                  </Form.Field>\n                </Grid.Column>\n              </Grid.Row>\n\n              <Grid.Row className=\"settings__row settings__row--2\">\n                <Grid.Column>\n                  <Form.Field>\n                    <label htmlFor=\"priceStep\">\n                      Price step:\n                      <Grid stackable>\n                        <Grid.Row columns={1}>\n                          <Grid.Column>\n                            <Field\n                              id=\"priceStep\"\n                              name=\"priceStep\"\n                              placeholder=\"Insert price step\"\n                            />\n                          </Grid.Column>\n                        </Grid.Row>\n                      </Grid>\n                    </label>\n                  </Form.Field>\n                </Grid.Column>\n              </Grid.Row>\n\n              <Grid.Row className=\"settings__row settings__row--3\">\n                <Grid.Column>\n                  <Form.Field>\n                    <label htmlFor=\"sizeStep\">\n                      Order size step %:\n                      <Field id=\"sizeStep\" name=\"sizeStep\" placeholder=\"Insert size step\" />\n                    </label>\n                  </Form.Field>\n                </Grid.Column>\n              </Grid.Row>\n\n              <Grid.Row className=\"settings__row settings__row--4\">\n                <Grid.Column>\n                  <Form.Field>\n                    <label htmlFor=\"price\">\n                      Start price:\n                      <Grid>\n                        <Grid.Row columns={2}>\n                          <Grid.Column width={16}>\n                            <Field\n                              id=\"price\"\n                              name=\"price\"\n                              placeholder=\"Insert price\"\n                              value={useCurrentPrice ? selectedSymbolPrice : values.price}\n                              onChange={(e: any): void => {\n                                setFieldValue(e.target.name, e.target.value);\n                              }}\n                            />\n                          </Grid.Column>\n                          <Grid.Column width={10}>\n                            <Checkbox\n                              label=\"Use current price ?\"\n                              toggle\n                              onChange={() => {\n                                setUseCurrentPrice(!useCurrentPrice);\n                              }}\n                            />\n                          </Grid.Column>\n                        </Grid.Row>\n                      </Grid>\n                    </label>\n                  </Form.Field>\n                </Grid.Column>\n              </Grid.Row>\n\n              <Grid.Row className=\"settings__row settings__row--5\">\n                <Grid.Column>\n                  <Form.Field>\n                    <label htmlFor=\"limit\">\n                      Invest limit:\n                      <Field id=\"limit\" name=\"limit\" placeholder=\"Insert limit\" />\n                    </label>\n                  </Form.Field>\n                </Grid.Column>\n              </Grid.Row>\n\n              <Grid.Row className=\"settings__row settings__row--6\">\n                {selectedSymbolPrice ? (\n                  <>\n                    <p>Current Price: {selectedSymbolPrice}</p>\n                  </>\n                ) : null}\n              </Grid.Row>\n              <Grid.Row className=\"settings__row settings__row--7\">\n                <Grid columns={2}>\n                  <Grid.Column>\n                    <Button type=\"submit\" onClick={() => handleSubmit()}>\n                      Create Orders\n                    </Button>\n                  </Grid.Column>\n                  <Grid.Column>\n                    <Button\n                      onClick={() => {\n                        getPrice();\n                      }}\n                    >\n                      Get Price\n                    </Button>\n                  </Grid.Column>\n                </Grid>\n              </Grid.Row>\n            </Grid>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\n\nimport { TopBar } from '../../components/TopBar/TopBar';\nimport { OrderSettings } from '../../components/OrderSettings/OrderSettings';\n\nimport './Order.scss';\n\nexport const Order: React.FC = () => {\n  return (\n    <div className=\"order\">\n      <Grid centered columns={2} padded>\n        <Grid.Row>\n          <TopBar />\n        </Grid.Row>\n        <Grid.Row>\n          <OrderSettings />\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\n\nimport './Sidebar.scss';\n\ninterface Props {\n  width: number;\n  height: string;\n  children: React.ReactNode;\n}\n\nconst Sidebar: React.FC<Props> = () => {\n  return (\n    <div className=\"sidebar\">\n      <ul className=\"sidebar-nav\">\n        <h2 className=\"logo\">BitPocket</h2>\n        <li className=\"sidebar-item\">\n          <a href=\"/\" className=\"sidebar-link\">\n            <Icon name=\"home\" size=\"big\" />\n            <span className=\"link-text logo-text\">Home</span>\n          </a>\n        </li>\n        <li className=\"sidebar-item\">\n          <a href=\"/\" className=\"sidebar-link\">\n            <Icon name=\"plus\" size=\"big\" />\n            <span className=\"link-text logo-text\">Create orders</span>\n          </a>\n        </li>\n        <li className=\"sidebar-item\">\n          <a href=\"/\" className=\"sidebar-link\">\n            <Icon name=\"list\" size=\"big\" />\n            <span className=\"link-text logo-text\">View orders</span>\n          </a>\n        </li>\n        <li className=\"sidebar-item\">\n          <a href=\"/\" className=\"sidebar-link\">\n            <Icon name=\"setting\" size=\"big\" />\n            <span className=\"link-text logo-text\">Settings</span>\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React from 'react';\n\nimport { Order } from './containers/Order/Order';\nimport Sidebar from './components/Sidebar/Sidebar';\n\nimport './App.scss';\nimport 'semantic-ui-css/semantic.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sidebar />\n      <Order />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}